# -*- coding: utf-8 -*-
"""Salary-estimation-using-KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JAIA1l5VR14wQWsVSgC-dkPsIiac1_5K

Import Libraries
"""

import pandas as pd
import numpy as np

"""Choosing dataset"""

from google.colab import files
uploaded = files.upload()

"""Load Dataset"""

dataset=pd.read_csv('salary.csv')

"""Knowing about Dataset"""

print(dataset.shape)
print(dataset.head())

"""Converting to binary values

"""

income_set=set(dataset['income'])
dataset['income']=dataset['income'].map({'<=50K': 0,'>50K': 1}).astype(int)
print(dataset.head)

"""dataset into independent and dependent variables"""

x=dataset.iloc[:,:-1].values
x

y=dataset.iloc[:,-1].values
y

"""Spliting dataset into train and test data"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=0)

"""Feature Scaling"""

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x_train=sc.fit_transform(x_train)
x_test=sc.transform(x_test)

"""Way to find best k value """

error=[]
from sklearn.neighbors import KNeighborsClassifier
import matplotlib.pyplot as plt
#calculating error for k values between 1 and 40
for i in range(1,40):
  model=KNeighborsClassifier(n_neighbors=i)
  model.fit(x_train,y_train)
  pred_i=model.predict(x_test)
  error.append(np.mean(pred_i!=y_test))
plt.figure(figsize=(12,6))
plt.plot(range(1,40),error,color='red',linestyle='dashed',marker='o',
         markerfacecolor='blue',markersize=10)
plt.title('Error rate of k value')
plt.xlabel('K value')
plt.ylabel('Mean Error')

"""Training"""

from sklearn.neighbors import KNeighborsClassifier
model=KNeighborsClassifier(n_neighbors=16,metric='minkowski',p=2)
model.fit(x_train,y_train)

"""Prediction"""

age=int(input("Enter new employee's age:"))
education=int(input("Enter new employee's Education:"))
capital=int(input("Enter new employee's Capital Gain:"))
hours=int(input("Enter new employee's Hours per week:"))
newEmp=[[age,education,capital,hours]]
result=model.predict(sc.transform(newEmp))
print(result)
if result==1:
  print("Employee salary might be above 50k")
else:
  print("Employee salary might be lesser or equal to 50k")

y_pred=model.predict(x_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),1))

"""Evaluating model"""

from sklearn.metrics import confusion_matrix,accuracy_score
cm=confusion_matrix(y_test,y_pred)
print("confusion matrix")
print(cm)

print("Accuracy of the Model: {0}%".format(accuracy_score(y_test,y_pred)*100))